---
# tasks file for arillso.chocolatey

- name: Install chocolatey
  win_chocolatey:
    name: chocolatey
  tags:
    - packages

- name: Add chocolatey to PATH
  win_path:
    name: PATH
    elements: '%PROGRAMDATA%\chocolatey\bin'
    scope: machine
    state: present
  register: register_choco_environment_path
  tags:
    - configuration

- name: Restart sshd for ENV:PATH
  block:
    - name: restart sshd to reflect changes to PATH
      win_service:
        name: sshd
        state: restarted
      async: 60
      poll: 0
      register: register_sshd_restart

    - name: wait for connectivity to be resumed after sshd restart
      async_status:
        jid: '{{ register_sshd_restart.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      retries: 60
      delay: 1
    - name: reset
      meta: reset_connection
  when: ansible_connection == "ssh" and register_choco_environment_path.changed

- name: Setup chocolatey source
  win_chocolatey_source:
    admin_only: '{{ item.admin_only | default(omit) }}'
    allow_self_service: '{{ item.allow_self_service | default(omit) }}'
    bypass_proxy: '{{ item.bypass_proxy | default(omit) }}'
    certificate: '{{ item.certificate | default(omit) }}'
    certificate_password: '{{ item.certificate_password | default(omit) }}'
    name: '{{ item.name }}'
    priority: '{{ item.priority | default(omit) }}'
    state: '{{ item.state | default(omit) }}'
    source: '{{ item.source | default(omit) }}'
    source_username: '{{ item.user | default(omit) }}'
    source_password: '{{ item.password | default(omit) }}'
    update_password: '{{ item.update_password | default(omit) }}'
  with_items: '{{ chocolatey_source }}'
  tags:
    - configuration

- name: Chocolatey configuration
  win_chocolatey_config:
    name: '{{ item.key }}'
    state: 'present'
    value: '{{ item.value }}'
  with_dict: '{{ chocolatey_config }}'
  when: item.value != None
  tags:
    - configuration

- name: Chocolatey configuration set default
  win_chocolatey_config:
    name: '{{ item.key }}'
    state: 'absent'
  with_dict: '{{ chocolatey_config }}'
  when: item.value == None
  tags:
    - configuration

- name: Chocolatey feature enable
  win_chocolatey_feature:
    name: '{{ item.key }}'
    state: 'enabled'
  with_dict: '{{ chocolatey_feature }}'
  when: item.value | bool
  tags:
    - configuration

- name: Chocolatey feature disable set default
  win_chocolatey_feature:
    name: '{{ item.key }}'
    state: 'disabled'
  with_dict: '{{ chocolatey_feature }}'
  when: not item.value | bool
  tags:
    - configuration
